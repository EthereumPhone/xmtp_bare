import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xmtp.message_contents";
/** Protos for XMTP Messages and their headers */
/**
 * Recognized compression algorithms
 * protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
 */
export declare enum Compression {
    COMPRESSION_DEFLATE = 0,
    COMPRESSION_GZIP = 1,
    UNRECOGNIZED = -1
}
export declare function compressionFromJSON(object: any): Compression;
export declare function compressionToJSON(object: Compression): string;
/**
 * Signature represents a generalized public key signature,
 * defined as a union to support cryptographic algorithm agility.
 */
export interface Signature {
    ecdsaCompact: Signature_ECDSACompact | undefined;
}
/** The format for an ECDSA signature bytes and the recovery bit */
export interface Signature_ECDSACompact {
    /** compact representation [ R || S ], 64 bytes */
    bytes: Uint8Array;
    /** recovery bit */
    recovery: number;
}
/**
 * PublicKey represents a generalized public key,
 * defined as a union to support cryptographic algorithm agility.
 */
export interface PublicKey {
    timestamp: Long;
    signature?: Signature | undefined;
    secp256k1Uncompressed: PublicKey_Secp256k1Uncompressed | undefined;
}
/** The key bytes */
export interface PublicKey_Secp256k1Uncompressed {
    /** uncompressed point with prefix (0x04) [ P || X || Y ], 65 bytes */
    bytes: Uint8Array;
}
/**
 * PublicKeyBundle packages the cryptographic keys associated with a wallet,
 * both senders and recipients are identified by their key bundles.
 */
export interface PublicKeyBundle {
    identityKey: PublicKey | undefined;
    preKey: PublicKey | undefined;
}
/**
 * The PublicKeyBundle of the user on the network.
 * Used to derive shared secrets for encrypted messaging
 */
export interface ContactBundleV1 {
    keyBundle: PublicKeyBundle | undefined;
}
/** Contains a oneof of ContactBundle versions */
export interface ContactBundle {
    v1: ContactBundleV1 | undefined;
}
/** ContentTypeId is used to identify the type of content stored in a Message. */
export interface ContentTypeId {
    /** authority governing this content type */
    authorityId: string;
    /** type identifier */
    typeId: string;
    /** major version of the type */
    versionMajor: number;
    /** minor version of the type */
    versionMinor: number;
}
/**
 * EncodedContent is the type embedded in Ciphertext.payload bytes,
 * it bundles the encoded content with metadata identifying the type of content
 * and parameters required for correct decoding and presentation of the content.
 */
export interface EncodedContent {
    /**
     * content type identifier used to match the payload with
     * the correct decoding machinery
     */
    type: ContentTypeId | undefined;
    /** optional encoding parameters required to correctly decode the content */
    parameters: {
        [key: string]: string;
    };
    /**
     * optional fallback description of the content that can be used in case
     * the client cannot decode or render the content
     */
    fallback?: string | undefined;
    /**
     * optional compression; the value indicates algorithm used to
     * compress the encoded content bytes
     */
    compression?: Compression | undefined;
    /** encoded content itself */
    content: Uint8Array;
}
export interface EncodedContent_ParametersEntry {
    key: string;
    value: string;
}
/**
 * Ciphertext represents the payload of the message encoded and
 * encrypted for transport.
 * It is definited as a union to support cryptographic algorithm agility.
 */
export interface Ciphertext {
    aes256GcmHkdfSha256: Ciphertext_Aes256gcmHkdfsha256 | undefined;
}
/** The encrypted payload */
export interface Ciphertext_Aes256gcmHkdfsha256 {
    hkdfSalt: Uint8Array;
    gcmNonce: Uint8Array;
    /** payload MUST contain encoding of a EncodedContent message */
    payload: Uint8Array;
}
/**
 * MessageHeader is encoded separately as the bytes are also used
 * as associated data for authenticated encryption
 */
export interface MessageHeader {
    sender: PublicKeyBundle | undefined;
    recipient: PublicKeyBundle | undefined;
    timestamp: Long;
}
/** Message is the top level protocol element */
export interface V1Message {
    /** encapsulates the encoded MessageHeader */
    headerBytes: Uint8Array;
    ciphertext: Ciphertext | undefined;
}
/** The outermost wrapper for a message on the network */
export interface Message {
    v1: V1Message | undefined;
}
export declare const Signature: {
    encode(message: Signature, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Signature;
    fromJSON(object: any): Signature;
    toJSON(message: Signature): unknown;
    fromPartial<I extends {
        ecdsaCompact?: {
            bytes?: Uint8Array | undefined;
            recovery?: number | undefined;
        } | undefined;
    } & {
        ecdsaCompact?: ({
            bytes?: Uint8Array | undefined;
            recovery?: number | undefined;
        } & {
            bytes?: Uint8Array | undefined;
            recovery?: number | undefined;
        } & { [K in Exclude<keyof I["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "ecdsaCompact">]: never; }>(object: I): Signature;
};
export declare const Signature_ECDSACompact: {
    encode(message: Signature_ECDSACompact, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Signature_ECDSACompact;
    fromJSON(object: any): Signature_ECDSACompact;
    toJSON(message: Signature_ECDSACompact): unknown;
    fromPartial<I extends {
        bytes?: Uint8Array | undefined;
        recovery?: number | undefined;
    } & {
        bytes?: Uint8Array | undefined;
        recovery?: number | undefined;
    } & { [K in Exclude<keyof I, keyof Signature_ECDSACompact>]: never; }>(object: I): Signature_ECDSACompact;
};
export declare const PublicKey: {
    encode(message: PublicKey, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PublicKey;
    fromJSON(object: any): PublicKey;
    toJSON(message: PublicKey): unknown;
    fromPartial<I extends {
        timestamp?: string | number | Long | undefined;
        signature?: {
            ecdsaCompact?: {
                bytes?: Uint8Array | undefined;
                recovery?: number | undefined;
            } | undefined;
        } | undefined;
        secp256k1Uncompressed?: {
            bytes?: Uint8Array | undefined;
        } | undefined;
    } & {
        timestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["timestamp"], keyof Long>]: never; }) | undefined;
        signature?: ({
            ecdsaCompact?: {
                bytes?: Uint8Array | undefined;
                recovery?: number | undefined;
            } | undefined;
        } & {
            ecdsaCompact?: ({
                bytes?: Uint8Array | undefined;
                recovery?: number | undefined;
            } & {
                bytes?: Uint8Array | undefined;
                recovery?: number | undefined;
            } & { [K_1 in Exclude<keyof I["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["signature"], "ecdsaCompact">]: never; }) | undefined;
        secp256k1Uncompressed?: ({
            bytes?: Uint8Array | undefined;
        } & {
            bytes?: Uint8Array | undefined;
        } & { [K_3 in Exclude<keyof I["secp256k1Uncompressed"], "bytes">]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, keyof PublicKey>]: never; }>(object: I): PublicKey;
};
export declare const PublicKey_Secp256k1Uncompressed: {
    encode(message: PublicKey_Secp256k1Uncompressed, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PublicKey_Secp256k1Uncompressed;
    fromJSON(object: any): PublicKey_Secp256k1Uncompressed;
    toJSON(message: PublicKey_Secp256k1Uncompressed): unknown;
    fromPartial<I extends {
        bytes?: Uint8Array | undefined;
    } & {
        bytes?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, "bytes">]: never; }>(object: I): PublicKey_Secp256k1Uncompressed;
};
export declare const PublicKeyBundle: {
    encode(message: PublicKeyBundle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PublicKeyBundle;
    fromJSON(object: any): PublicKeyBundle;
    toJSON(message: PublicKeyBundle): unknown;
    fromPartial<I extends {
        identityKey?: {
            timestamp?: string | number | Long | undefined;
            signature?: {
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } | undefined;
            secp256k1Uncompressed?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        preKey?: {
            timestamp?: string | number | Long | undefined;
            signature?: {
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } | undefined;
            secp256k1Uncompressed?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
    } & {
        identityKey?: ({
            timestamp?: string | number | Long | undefined;
            signature?: {
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } | undefined;
            secp256k1Uncompressed?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
        } & {
            timestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K in Exclude<keyof I["identityKey"]["timestamp"], keyof Long>]: never; }) | undefined;
            signature?: ({
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } & {
                ecdsaCompact?: ({
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } & { [K_1 in Exclude<keyof I["identityKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
            } & { [K_2 in Exclude<keyof I["identityKey"]["signature"], "ecdsaCompact">]: never; }) | undefined;
            secp256k1Uncompressed?: ({
                bytes?: Uint8Array | undefined;
            } & {
                bytes?: Uint8Array | undefined;
            } & { [K_3 in Exclude<keyof I["identityKey"]["secp256k1Uncompressed"], "bytes">]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I["identityKey"], keyof PublicKey>]: never; }) | undefined;
        preKey?: ({
            timestamp?: string | number | Long | undefined;
            signature?: {
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } | undefined;
            secp256k1Uncompressed?: {
                bytes?: Uint8Array | undefined;
            } | undefined;
        } & {
            timestamp?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K_5 in Exclude<keyof I["preKey"]["timestamp"], keyof Long>]: never; }) | undefined;
            signature?: ({
                ecdsaCompact?: {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } | undefined;
            } & {
                ecdsaCompact?: ({
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                    recovery?: number | undefined;
                } & { [K_6 in Exclude<keyof I["preKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
            } & { [K_7 in Exclude<keyof I["preKey"]["signature"], "ecdsaCompact">]: never; }) | undefined;
            secp256k1Uncompressed?: ({
                bytes?: Uint8Array | undefined;
            } & {
                bytes?: Uint8Array | undefined;
            } & { [K_8 in Exclude<keyof I["preKey"]["secp256k1Uncompressed"], "bytes">]: never; }) | undefined;
        } & { [K_9 in Exclude<keyof I["preKey"], keyof PublicKey>]: never; }) | undefined;
    } & { [K_10 in Exclude<keyof I, keyof PublicKeyBundle>]: never; }>(object: I): PublicKeyBundle;
};
export declare const ContactBundleV1: {
    encode(message: ContactBundleV1, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContactBundleV1;
    fromJSON(object: any): ContactBundleV1;
    toJSON(message: ContactBundleV1): unknown;
    fromPartial<I extends {
        keyBundle?: {
            identityKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
    } & {
        keyBundle?: ({
            identityKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            identityKey?: ({
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K in Exclude<keyof I["keyBundle"]["identityKey"]["timestamp"], keyof Long>]: never; }) | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_1 in Exclude<keyof I["keyBundle"]["identityKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I["keyBundle"]["identityKey"]["signature"], "ecdsaCompact">]: never; }) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & { [K_3 in Exclude<keyof I["keyBundle"]["identityKey"]["secp256k1Uncompressed"], "bytes">]: never; }) | undefined;
            } & { [K_4 in Exclude<keyof I["keyBundle"]["identityKey"], keyof PublicKey>]: never; }) | undefined;
            preKey?: ({
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_5 in Exclude<keyof I["keyBundle"]["preKey"]["timestamp"], keyof Long>]: never; }) | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_6 in Exclude<keyof I["keyBundle"]["preKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
                } & { [K_7 in Exclude<keyof I["keyBundle"]["preKey"]["signature"], "ecdsaCompact">]: never; }) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & { [K_8 in Exclude<keyof I["keyBundle"]["preKey"]["secp256k1Uncompressed"], "bytes">]: never; }) | undefined;
            } & { [K_9 in Exclude<keyof I["keyBundle"]["preKey"], keyof PublicKey>]: never; }) | undefined;
        } & { [K_10 in Exclude<keyof I["keyBundle"], keyof PublicKeyBundle>]: never; }) | undefined;
    } & { [K_11 in Exclude<keyof I, "keyBundle">]: never; }>(object: I): ContactBundleV1;
};
export declare const ContactBundle: {
    encode(message: ContactBundle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContactBundle;
    fromJSON(object: any): ContactBundle;
    toJSON(message: ContactBundle): unknown;
    fromPartial<I extends {
        v1?: {
            keyBundle?: {
                identityKey?: {
                    timestamp?: string | number | Long | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                preKey?: {
                    timestamp?: string | number | Long | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
    } & {
        v1?: ({
            keyBundle?: {
                identityKey?: {
                    timestamp?: string | number | Long | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                preKey?: {
                    timestamp?: string | number | Long | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
        } & {
            keyBundle?: ({
                identityKey?: {
                    timestamp?: string | number | Long | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                preKey?: {
                    timestamp?: string | number | Long | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
            } & {
                identityKey?: ({
                    timestamp?: string | number | Long | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } & {
                    timestamp?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K in Exclude<keyof I["v1"]["keyBundle"]["identityKey"]["timestamp"], keyof Long>]: never; }) | undefined;
                    signature?: ({
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } & {
                        ecdsaCompact?: ({
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & { [K_1 in Exclude<keyof I["v1"]["keyBundle"]["identityKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
                    } & { [K_2 in Exclude<keyof I["v1"]["keyBundle"]["identityKey"]["signature"], "ecdsaCompact">]: never; }) | undefined;
                    secp256k1Uncompressed?: ({
                        bytes?: Uint8Array | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                    } & { [K_3 in Exclude<keyof I["v1"]["keyBundle"]["identityKey"]["secp256k1Uncompressed"], "bytes">]: never; }) | undefined;
                } & { [K_4 in Exclude<keyof I["v1"]["keyBundle"]["identityKey"], keyof PublicKey>]: never; }) | undefined;
                preKey?: ({
                    timestamp?: string | number | Long | undefined;
                    signature?: {
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } | undefined;
                    secp256k1Uncompressed?: {
                        bytes?: Uint8Array | undefined;
                    } | undefined;
                } & {
                    timestamp?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_5 in Exclude<keyof I["v1"]["keyBundle"]["preKey"]["timestamp"], keyof Long>]: never; }) | undefined;
                    signature?: ({
                        ecdsaCompact?: {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } | undefined;
                    } & {
                        ecdsaCompact?: ({
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & {
                            bytes?: Uint8Array | undefined;
                            recovery?: number | undefined;
                        } & { [K_6 in Exclude<keyof I["v1"]["keyBundle"]["preKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
                    } & { [K_7 in Exclude<keyof I["v1"]["keyBundle"]["preKey"]["signature"], "ecdsaCompact">]: never; }) | undefined;
                    secp256k1Uncompressed?: ({
                        bytes?: Uint8Array | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                    } & { [K_8 in Exclude<keyof I["v1"]["keyBundle"]["preKey"]["secp256k1Uncompressed"], "bytes">]: never; }) | undefined;
                } & { [K_9 in Exclude<keyof I["v1"]["keyBundle"]["preKey"], keyof PublicKey>]: never; }) | undefined;
            } & { [K_10 in Exclude<keyof I["v1"]["keyBundle"], keyof PublicKeyBundle>]: never; }) | undefined;
        } & { [K_11 in Exclude<keyof I["v1"], "keyBundle">]: never; }) | undefined;
    } & { [K_12 in Exclude<keyof I, "v1">]: never; }>(object: I): ContactBundle;
};
export declare const ContentTypeId: {
    encode(message: ContentTypeId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContentTypeId;
    fromJSON(object: any): ContentTypeId;
    toJSON(message: ContentTypeId): unknown;
    fromPartial<I extends {
        authorityId?: string | undefined;
        typeId?: string | undefined;
        versionMajor?: number | undefined;
        versionMinor?: number | undefined;
    } & {
        authorityId?: string | undefined;
        typeId?: string | undefined;
        versionMajor?: number | undefined;
        versionMinor?: number | undefined;
    } & { [K in Exclude<keyof I, keyof ContentTypeId>]: never; }>(object: I): ContentTypeId;
};
export declare const EncodedContent: {
    encode(message: EncodedContent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EncodedContent;
    fromJSON(object: any): EncodedContent;
    toJSON(message: EncodedContent): unknown;
    fromPartial<I extends {
        type?: {
            authorityId?: string | undefined;
            typeId?: string | undefined;
            versionMajor?: number | undefined;
            versionMinor?: number | undefined;
        } | undefined;
        parameters?: {
            [x: string]: string | undefined;
        } | undefined;
        fallback?: string | undefined;
        compression?: Compression | undefined;
        content?: Uint8Array | undefined;
    } & {
        type?: ({
            authorityId?: string | undefined;
            typeId?: string | undefined;
            versionMajor?: number | undefined;
            versionMinor?: number | undefined;
        } & {
            authorityId?: string | undefined;
            typeId?: string | undefined;
            versionMajor?: number | undefined;
            versionMinor?: number | undefined;
        } & { [K in Exclude<keyof I["type"], keyof ContentTypeId>]: never; }) | undefined;
        parameters?: ({
            [x: string]: string | undefined;
        } & {
            [x: string]: string | undefined;
        } & { [K_1 in Exclude<keyof I["parameters"], string | number>]: never; }) | undefined;
        fallback?: string | undefined;
        compression?: Compression | undefined;
        content?: Uint8Array | undefined;
    } & { [K_2 in Exclude<keyof I, keyof EncodedContent>]: never; }>(object: I): EncodedContent;
};
export declare const EncodedContent_ParametersEntry: {
    encode(message: EncodedContent_ParametersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EncodedContent_ParametersEntry;
    fromJSON(object: any): EncodedContent_ParametersEntry;
    toJSON(message: EncodedContent_ParametersEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EncodedContent_ParametersEntry>]: never; }>(object: I): EncodedContent_ParametersEntry;
};
export declare const Ciphertext: {
    encode(message: Ciphertext, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Ciphertext;
    fromJSON(object: any): Ciphertext;
    toJSON(message: Ciphertext): unknown;
    fromPartial<I extends {
        aes256GcmHkdfSha256?: {
            hkdfSalt?: Uint8Array | undefined;
            gcmNonce?: Uint8Array | undefined;
            payload?: Uint8Array | undefined;
        } | undefined;
    } & {
        aes256GcmHkdfSha256?: ({
            hkdfSalt?: Uint8Array | undefined;
            gcmNonce?: Uint8Array | undefined;
            payload?: Uint8Array | undefined;
        } & {
            hkdfSalt?: Uint8Array | undefined;
            gcmNonce?: Uint8Array | undefined;
            payload?: Uint8Array | undefined;
        } & { [K in Exclude<keyof I["aes256GcmHkdfSha256"], keyof Ciphertext_Aes256gcmHkdfsha256>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "aes256GcmHkdfSha256">]: never; }>(object: I): Ciphertext;
};
export declare const Ciphertext_Aes256gcmHkdfsha256: {
    encode(message: Ciphertext_Aes256gcmHkdfsha256, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Ciphertext_Aes256gcmHkdfsha256;
    fromJSON(object: any): Ciphertext_Aes256gcmHkdfsha256;
    toJSON(message: Ciphertext_Aes256gcmHkdfsha256): unknown;
    fromPartial<I extends {
        hkdfSalt?: Uint8Array | undefined;
        gcmNonce?: Uint8Array | undefined;
        payload?: Uint8Array | undefined;
    } & {
        hkdfSalt?: Uint8Array | undefined;
        gcmNonce?: Uint8Array | undefined;
        payload?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, keyof Ciphertext_Aes256gcmHkdfsha256>]: never; }>(object: I): Ciphertext_Aes256gcmHkdfsha256;
};
export declare const MessageHeader: {
    encode(message: MessageHeader, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MessageHeader;
    fromJSON(object: any): MessageHeader;
    toJSON(message: MessageHeader): unknown;
    fromPartial<I extends {
        sender?: {
            identityKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        recipient?: {
            identityKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        timestamp?: string | number | Long | undefined;
    } & {
        sender?: ({
            identityKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            identityKey?: ({
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K in Exclude<keyof I["sender"]["identityKey"]["timestamp"], keyof Long>]: never; }) | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_1 in Exclude<keyof I["sender"]["identityKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
                } & { [K_2 in Exclude<keyof I["sender"]["identityKey"]["signature"], "ecdsaCompact">]: never; }) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & { [K_3 in Exclude<keyof I["sender"]["identityKey"]["secp256k1Uncompressed"], "bytes">]: never; }) | undefined;
            } & { [K_4 in Exclude<keyof I["sender"]["identityKey"], keyof PublicKey>]: never; }) | undefined;
            preKey?: ({
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_5 in Exclude<keyof I["sender"]["preKey"]["timestamp"], keyof Long>]: never; }) | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_6 in Exclude<keyof I["sender"]["preKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
                } & { [K_7 in Exclude<keyof I["sender"]["preKey"]["signature"], "ecdsaCompact">]: never; }) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & { [K_8 in Exclude<keyof I["sender"]["preKey"]["secp256k1Uncompressed"], "bytes">]: never; }) | undefined;
            } & { [K_9 in Exclude<keyof I["sender"]["preKey"], keyof PublicKey>]: never; }) | undefined;
        } & { [K_10 in Exclude<keyof I["sender"], keyof PublicKeyBundle>]: never; }) | undefined;
        recipient?: ({
            identityKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            preKey?: {
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            identityKey?: ({
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_11 in Exclude<keyof I["recipient"]["identityKey"]["timestamp"], keyof Long>]: never; }) | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_12 in Exclude<keyof I["recipient"]["identityKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
                } & { [K_13 in Exclude<keyof I["recipient"]["identityKey"]["signature"], "ecdsaCompact">]: never; }) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & { [K_14 in Exclude<keyof I["recipient"]["identityKey"]["secp256k1Uncompressed"], "bytes">]: never; }) | undefined;
            } & { [K_15 in Exclude<keyof I["recipient"]["identityKey"], keyof PublicKey>]: never; }) | undefined;
            preKey?: ({
                timestamp?: string | number | Long | undefined;
                signature?: {
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } | undefined;
                secp256k1Uncompressed?: {
                    bytes?: Uint8Array | undefined;
                } | undefined;
            } & {
                timestamp?: string | number | (Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long) => Long;
                    and: (other: string | number | Long) => Long;
                    compare: (other: string | number | Long) => number;
                    comp: (other: string | number | Long) => number;
                    divide: (divisor: string | number | Long) => Long;
                    div: (divisor: string | number | Long) => Long;
                    equals: (other: string | number | Long) => boolean;
                    eq: (other: string | number | Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long) => boolean;
                    gt: (other: string | number | Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long) => boolean;
                    gte: (other: string | number | Long) => boolean;
                    ge: (other: string | number | Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    eqz: () => boolean;
                    lessThan: (other: string | number | Long) => boolean;
                    lt: (other: string | number | Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long) => boolean;
                    lte: (other: string | number | Long) => boolean;
                    le: (other: string | number | Long) => boolean;
                    modulo: (other: string | number | Long) => Long;
                    mod: (other: string | number | Long) => Long;
                    rem: (other: string | number | Long) => Long;
                    multiply: (multiplier: string | number | Long) => Long;
                    mul: (multiplier: string | number | Long) => Long;
                    negate: () => Long;
                    neg: () => Long;
                    not: () => Long;
                    countLeadingZeros: () => number;
                    clz: () => number;
                    countTrailingZeros: () => number;
                    ctz: () => number;
                    notEquals: (other: string | number | Long) => boolean;
                    neq: (other: string | number | Long) => boolean;
                    ne: (other: string | number | Long) => boolean;
                    or: (other: string | number | Long) => Long;
                    shiftLeft: (numBits: number | Long) => Long;
                    shl: (numBits: number | Long) => Long;
                    shiftRight: (numBits: number | Long) => Long;
                    shr: (numBits: number | Long) => Long;
                    shiftRightUnsigned: (numBits: number | Long) => Long;
                    shru: (numBits: number | Long) => Long;
                    shr_u: (numBits: number | Long) => Long;
                    rotateLeft: (numBits: number | Long) => Long;
                    rotl: (numBits: number | Long) => Long;
                    rotateRight: (numBits: number | Long) => Long;
                    rotr: (numBits: number | Long) => Long;
                    subtract: (subtrahend: string | number | Long) => Long;
                    sub: (subtrahend: string | number | Long) => Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long;
                    xor: (other: string | number | Long) => Long;
                } & { [K_16 in Exclude<keyof I["recipient"]["preKey"]["timestamp"], keyof Long>]: never; }) | undefined;
                signature?: ({
                    ecdsaCompact?: {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } | undefined;
                } & {
                    ecdsaCompact?: ({
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & {
                        bytes?: Uint8Array | undefined;
                        recovery?: number | undefined;
                    } & { [K_17 in Exclude<keyof I["recipient"]["preKey"]["signature"]["ecdsaCompact"], keyof Signature_ECDSACompact>]: never; }) | undefined;
                } & { [K_18 in Exclude<keyof I["recipient"]["preKey"]["signature"], "ecdsaCompact">]: never; }) | undefined;
                secp256k1Uncompressed?: ({
                    bytes?: Uint8Array | undefined;
                } & {
                    bytes?: Uint8Array | undefined;
                } & { [K_19 in Exclude<keyof I["recipient"]["preKey"]["secp256k1Uncompressed"], "bytes">]: never; }) | undefined;
            } & { [K_20 in Exclude<keyof I["recipient"]["preKey"], keyof PublicKey>]: never; }) | undefined;
        } & { [K_21 in Exclude<keyof I["recipient"], keyof PublicKeyBundle>]: never; }) | undefined;
        timestamp?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_22 in Exclude<keyof I["timestamp"], keyof Long>]: never; }) | undefined;
    } & { [K_23 in Exclude<keyof I, keyof MessageHeader>]: never; }>(object: I): MessageHeader;
};
export declare const V1Message: {
    encode(message: V1Message, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): V1Message;
    fromJSON(object: any): V1Message;
    toJSON(message: V1Message): unknown;
    fromPartial<I extends {
        headerBytes?: Uint8Array | undefined;
        ciphertext?: {
            aes256GcmHkdfSha256?: {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
    } & {
        headerBytes?: Uint8Array | undefined;
        ciphertext?: ({
            aes256GcmHkdfSha256?: {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } | undefined;
        } & {
            aes256GcmHkdfSha256?: ({
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } & {
                hkdfSalt?: Uint8Array | undefined;
                gcmNonce?: Uint8Array | undefined;
                payload?: Uint8Array | undefined;
            } & { [K in Exclude<keyof I["ciphertext"]["aes256GcmHkdfSha256"], keyof Ciphertext_Aes256gcmHkdfsha256>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["ciphertext"], "aes256GcmHkdfSha256">]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof V1Message>]: never; }>(object: I): V1Message;
};
export declare const Message: {
    encode(message: Message, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Message;
    fromJSON(object: any): Message;
    toJSON(message: Message): unknown;
    fromPartial<I extends {
        v1?: {
            headerBytes?: Uint8Array | undefined;
            ciphertext?: {
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
    } & {
        v1?: ({
            headerBytes?: Uint8Array | undefined;
            ciphertext?: {
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            headerBytes?: Uint8Array | undefined;
            ciphertext?: ({
                aes256GcmHkdfSha256?: {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } | undefined;
            } & {
                aes256GcmHkdfSha256?: ({
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } & {
                    hkdfSalt?: Uint8Array | undefined;
                    gcmNonce?: Uint8Array | undefined;
                    payload?: Uint8Array | undefined;
                } & { [K in Exclude<keyof I["v1"]["ciphertext"]["aes256GcmHkdfSha256"], keyof Ciphertext_Aes256gcmHkdfsha256>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["v1"]["ciphertext"], "aes256GcmHkdfSha256">]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["v1"], keyof V1Message>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, "v1">]: never; }>(object: I): Message;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
