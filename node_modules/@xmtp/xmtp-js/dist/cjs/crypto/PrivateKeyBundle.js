"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BundleUpgradeNeeded = void 0;
const proto_1 = require("@xmtp/proto");
const PrivateKey_1 = __importDefault(require("./PrivateKey"));
const PublicKeyBundle_1 = __importDefault(require("./PublicKeyBundle"));
const Ciphertext_1 = __importDefault(require("./Ciphertext"));
const utils_1 = require("./utils");
const encryption_1 = require("./encryption");
const errors_1 = require("./errors");
// PrivateKeyBundle bundles the private keys corresponding to a PublicKeyBundle for convenience.
// This bundle must not be shared with anyone, although will have to be persisted
// somehow so that older messages can be decrypted again.
class PrivateKeyBundle {
    constructor(identityKey, preKeys) {
        this.identityKey = identityKey;
        this.preKeys = preKeys || [];
    }
    // Generate a new key bundle with the preKey signed byt the identityKey.
    // Optionally sign the identityKey with the provided wallet as well.
    static generate(wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            const identityKey = PrivateKey_1.default.generate();
            if (wallet) {
                yield identityKey.publicKey.signWithWallet(wallet);
            }
            const bundle = new PrivateKeyBundle(identityKey);
            yield bundle.addPreKey();
            return bundle;
        });
    }
    // Return the current (latest) pre-key (to be advertised).
    getCurrentPreKey() {
        return this.preKeys[0];
    }
    // Find pre-key matching the provided public key.
    findPreKey(which) {
        const preKey = this.preKeys.find((key) => key.matches(which));
        if (!preKey) {
            throw new errors_1.NoMatchingPreKeyError();
        }
        return preKey;
    }
    // Generate a new pre-key to be used as the current pre-key.
    addPreKey() {
        return __awaiter(this, void 0, void 0, function* () {
            const preKey = PrivateKey_1.default.generate();
            yield this.identityKey.signKey(preKey.publicKey);
            this.preKeys.unshift(preKey);
        });
    }
    // Return a key bundle with the current pre-key.
    getPublicKeyBundle() {
        return new PublicKeyBundle_1.default(this.identityKey.publicKey, this.getCurrentPreKey().publicKey);
    }
    // sharedSecret derives a secret from peer's key bundles using a variation of X3DH protocol
    // where the sender's ephemeral key pair is replaced by the sender's pre-key.
    // @peer is the peer's public key bundle
    // @myPreKey indicates which of my preKeys should be used to derive the secret
    // @recipient indicates if this is the sending or receiving side.
    sharedSecret(peer, myPreKey, isRecipient) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!peer.identityKey || !peer.preKey) {
                throw new Error('invalid peer key bundle');
            }
            if (!(yield peer.identityKey.verifyKey(peer.preKey))) {
                throw new Error('peer preKey signature invalid');
            }
            if (!this.identityKey) {
                throw new Error('missing identity key');
            }
            let dh1, dh2, preKey;
            if (isRecipient) {
                preKey = this.findPreKey(myPreKey);
                dh1 = preKey.sharedSecret(peer.identityKey);
                dh2 = this.identityKey.sharedSecret(peer.preKey);
            }
            else {
                preKey = this.findPreKey(myPreKey);
                dh1 = this.identityKey.sharedSecret(peer.preKey);
                dh2 = preKey.sharedSecret(peer.identityKey);
            }
            const dh3 = preKey.sharedSecret(peer.preKey);
            const secret = new Uint8Array(dh1.length + dh2.length + dh3.length);
            secret.set(dh1, 0);
            secret.set(dh2, dh1.length);
            secret.set(dh3, dh1.length + dh2.length);
            return secret;
        });
    }
    static storageSigRequestText(preKey) {
        // Note that an update to this signature request text will require
        // addition of backward compatability for existing encrypted bundles
        // and/or a migration; otherwise clients will no longer be able to
        // decrypt those bundles.
        return ('XMTP : Enable Identity\n' +
            `${(0, utils_1.bytesToHex)(preKey)}\n` +
            '\n' +
            'For more info: https://xmtp.org/signatures/');
    }
    // encrypts/serializes the bundle for storage
    toEncryptedBytes(wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            // serialize the contents
            if (this.preKeys.length === 0) {
                throw new Error('missing pre-keys');
            }
            if (!this.identityKey) {
                throw new Error('missing identity key');
            }
            const bytes = proto_1.privateKey.PrivateKeyBundle.encode({
                v1: {
                    identityKey: this.identityKey,
                    preKeys: this.preKeys,
                },
            }).finish();
            const wPreKey = (0, utils_1.getRandomValues)(new Uint8Array(32));
            const secret = (0, utils_1.hexToBytes)(yield wallet.signMessage(PrivateKeyBundle.storageSigRequestText(wPreKey)));
            const ciphertext = yield (0, encryption_1.encrypt)(bytes, secret);
            return proto_1.privateKey.EncryptedPrivateKeyBundle.encode({
                v1: {
                    walletPreKey: wPreKey,
                    ciphertext,
                },
            }).finish();
        });
    }
    encode() {
        return proto_1.privateKey.PrivateKeyBundle.encode({ v1: this }).finish();
    }
    static decode(bytes) {
        const [protoVal] = getPrivateV1Bundle(bytes);
        if (!protoVal || !protoVal.identityKey || !protoVal.preKeys.length) {
            throw new Error('Decode failure');
        }
        return new PrivateKeyBundle(new PrivateKey_1.default(protoVal.identityKey), protoVal.preKeys.map((protoKey) => new PrivateKey_1.default(protoKey)));
    }
    // decrypts/deserializes the bundle from storage bytes
    static fromEncryptedBytes(wallet, bytes) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const [eBundle, needsUpdateA] = getEncryptedV1Bundle(bytes);
            if (!eBundle) {
                throw new Error('invalid bundle version');
            }
            if (!eBundle.walletPreKey) {
                throw new Error('missing wallet pre-key');
            }
            const secret = (0, utils_1.hexToBytes)(yield wallet.signMessage(PrivateKeyBundle.storageSigRequestText(eBundle.walletPreKey)));
            if (!((_a = eBundle === null || eBundle === void 0 ? void 0 : eBundle.ciphertext) === null || _a === void 0 ? void 0 : _a.aes256GcmHkdfSha256)) {
                throw new Error('missing bundle ciphertext');
            }
            const ciphertext = new Ciphertext_1.default(eBundle.ciphertext);
            const decrypted = yield (0, encryption_1.decrypt)(ciphertext, secret);
            const [bundle, needsUpdateB] = getPrivateV1Bundle(decrypted);
            if (!bundle) {
                throw new Error('could not decode bundle');
            }
            if (!bundle.identityKey) {
                throw new Error('missing identity key');
            }
            if (bundle.preKeys.length === 0) {
                throw new Error('missing pre-keys');
            }
            const retBundle = new PrivateKeyBundle(new PrivateKey_1.default(bundle.identityKey), bundle.preKeys.map((protoKey) => new PrivateKey_1.default(protoKey)));
            // If either the EncryptedPrivateKeyBundle or the PrivateKeyBundle are in the legacy format, then signal to the caller to
            // update the bundle in the store. The valid bundle is included in the error, so it does not need to be parsed again.
            if (needsUpdateA || needsUpdateB) {
                throw new BundleUpgradeNeeded(retBundle);
            }
            return retBundle;
        });
    }
}
exports.default = PrivateKeyBundle;
class BundleUpgradeNeeded extends Error {
    constructor(bundle) {
        super('BundleFormatIsOutdated');
        this.bundle = bundle;
    }
}
exports.BundleUpgradeNeeded = BundleUpgradeNeeded;
// getEncryptedV1Bundle returns the decoded bundle from the provided bytes. If there is an error decoding the bundle it attempts
// to decode the bundle as a legacy bundle. Additionally return whether the bundle is in the expected format.
function getEncryptedV1Bundle(bytes) {
    try {
        const b = proto_1.privateKey.EncryptedPrivateKeyBundle.decode(bytes);
        return [b.v1, false];
    }
    catch (e) {
        if (e instanceof RangeError ||
            (e instanceof Error && e.message.startsWith('invalid wire type'))) {
            // Adds a default fallback for older versions of the KeyBundles
            return [proto_1.privateKey.EncryptedPrivateKeyBundleV1.decode(bytes), true];
        }
        throw new Error("Couldn't decode encrypted bundle:" + e);
    }
}
// getPrivateV1Bundle returns the decoded bundle from the provided bytes. If there is an error decoding the bundle it attempts
// to decode the bundle as a legacy bundle. Additionally return whether the bundle is in the expected format.
function getPrivateV1Bundle(bytes) {
    try {
        const b = proto_1.privateKey.PrivateKeyBundle.decode(bytes);
        return [b.v1, false];
    }
    catch (e) {
        if (e instanceof RangeError ||
            (e instanceof Error && e.message.startsWith('invalid wire type'))) {
            // Adds a default fallback for older versions of the proto
            return [proto_1.privateKey.PrivateKeyBundleV1.decode(bytes), true];
        }
        throw new Error("Couldn't decode private bundle:" + e);
    }
}
//# sourceMappingURL=PrivateKeyBundle.js.map