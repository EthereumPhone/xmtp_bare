"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const proto_1 = require("@xmtp/proto");
const PublicKey_1 = __importDefault(require("./PublicKey"));
// PublicKeyBundle packages all the keys that a participant should advertise.
// The PreKey must be signed by the IdentityKey.
// The IdentityKey can be signed by the wallet to authenticate it.
class PublicKeyBundle {
    constructor(identityKey, preKey) {
        if (!identityKey) {
            throw new Error('missing identity key');
        }
        if (!preKey) {
            throw new Error('missing pre-key');
        }
        this.identityKey = identityKey;
        this.preKey = preKey;
    }
    walletSignatureAddress() {
        return this.identityKey.walletSignatureAddress();
    }
    toBytes() {
        return proto_1.xmtpEnvelope.PublicKeyBundle.encode(this).finish();
    }
    static fromBytes(bytes) {
        const decoded = proto_1.xmtpEnvelope.PublicKeyBundle.decode(bytes);
        if (!decoded.identityKey) {
            throw new Error('missing identity key');
        }
        if (!decoded.preKey) {
            throw new Error('missing pre-key');
        }
        return new PublicKeyBundle(new PublicKey_1.default(decoded.identityKey), new PublicKey_1.default(decoded.preKey));
    }
}
exports.default = PublicKeyBundle;
//# sourceMappingURL=PublicKeyBundle.js.map